// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"autopilot/backends/api/internal/payment/model"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockPaymenter creates a new instance of MockPaymenter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymenter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymenter {
	mock := &MockPaymenter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPaymenter is an autogenerated mock type for the Paymenter type
type MockPaymenter struct {
	mock.Mock
}

type MockPaymenter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymenter) EXPECT() *MockPaymenter_Expecter {
	return &MockPaymenter_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockPaymenter
func (_mock *MockPaymenter) Create(ctx context.Context, id string) (*model.Payment, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Payment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Payment, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Payment); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Payment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPaymenter_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPaymenter_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockPaymenter_Expecter) Create(ctx interface{}, id interface{}) *MockPaymenter_Create_Call {
	return &MockPaymenter_Create_Call{Call: _e.mock.On("Create", ctx, id)}
}

func (_c *MockPaymenter_Create_Call) Run(run func(ctx context.Context, id string)) *MockPaymenter_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPaymenter_Create_Call) Return(payment *model.Payment, err error) *MockPaymenter_Create_Call {
	_c.Call.Return(payment, err)
	return _c
}

func (_c *MockPaymenter_Create_Call) RunAndReturn(run func(ctx context.Context, id string) (*model.Payment, error)) *MockPaymenter_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockPaymenter
func (_mock *MockPaymenter) Get(ctx context.Context, id string) (*model.Payment, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Payment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Payment, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Payment); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Payment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPaymenter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPaymenter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockPaymenter_Expecter) Get(ctx interface{}, id interface{}) *MockPaymenter_Get_Call {
	return &MockPaymenter_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockPaymenter_Get_Call) Run(run func(ctx context.Context, id string)) *MockPaymenter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPaymenter_Get_Call) Return(payment *model.Payment, err error) *MockPaymenter_Get_Call {
	_c.Call.Return(payment, err)
	return _c
}

func (_c *MockPaymenter_Get_Call) RunAndReturn(run func(ctx context.Context, id string) (*model.Payment, error)) *MockPaymenter_Get_Call {
	_c.Call.Return(run)
	return _c
}
