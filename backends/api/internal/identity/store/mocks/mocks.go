// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"autopilot/backends/api/internal/identity/model"
	"autopilot/backends/api/internal/identity/store"
	"autopilot/backends/internal/core"
	"autopilot/backends/internal/types"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAuditLoger creates a new instance of MockAuditLoger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuditLoger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuditLoger {
	mock := &MockAuditLoger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuditLoger is an autogenerated mock type for the AuditLoger type
type MockAuditLoger struct {
	mock.Mock
}

type MockAuditLoger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuditLoger) EXPECT() *MockAuditLoger_Expecter {
	return &MockAuditLoger_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockAuditLoger
func (_mock *MockAuditLoger) Create(ctx context.Context, log *model.AuditLog) (*model.AuditLog, error) {
	ret := _mock.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.AuditLog
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.AuditLog) (*model.AuditLog, error)); ok {
		return returnFunc(ctx, log)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.AuditLog) *model.AuditLog); ok {
		r0 = returnFunc(ctx, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuditLog)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.AuditLog) error); ok {
		r1 = returnFunc(ctx, log)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuditLoger_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAuditLoger_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - log *model.AuditLog
func (_e *MockAuditLoger_Expecter) Create(ctx interface{}, log interface{}) *MockAuditLoger_Create_Call {
	return &MockAuditLoger_Create_Call{Call: _e.mock.On("Create", ctx, log)}
}

func (_c *MockAuditLoger_Create_Call) Run(run func(ctx context.Context, log *model.AuditLog)) *MockAuditLoger_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.AuditLog
		if args[1] != nil {
			arg1 = args[1].(*model.AuditLog)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuditLoger_Create_Call) Return(auditLog *model.AuditLog, err error) *MockAuditLoger_Create_Call {
	_c.Call.Return(auditLog, err)
	return _c
}

func (_c *MockAuditLoger_Create_Call) RunAndReturn(run func(ctx context.Context, log *model.AuditLog) (*model.AuditLog, error)) *MockAuditLoger_Create_Call {
	_c.Call.Return(run)
	return _c
}

// WithQuerier provides a mock function for the type MockAuditLoger
func (_mock *MockAuditLoger) WithQuerier(q core.Querier) store.AuditLoger {
	ret := _mock.Called(q)

	if len(ret) == 0 {
		panic("no return value specified for WithQuerier")
	}

	var r0 store.AuditLoger
	if returnFunc, ok := ret.Get(0).(func(core.Querier) store.AuditLoger); ok {
		r0 = returnFunc(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AuditLoger)
		}
	}
	return r0
}

// MockAuditLoger_WithQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithQuerier'
type MockAuditLoger_WithQuerier_Call struct {
	*mock.Call
}

// WithQuerier is a helper method to define mock.On call
//   - q core.Querier
func (_e *MockAuditLoger_Expecter) WithQuerier(q interface{}) *MockAuditLoger_WithQuerier_Call {
	return &MockAuditLoger_WithQuerier_Call{Call: _e.mock.On("WithQuerier", q)}
}

func (_c *MockAuditLoger_WithQuerier_Call) Run(run func(q core.Querier)) *MockAuditLoger_WithQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.Querier
		if args[0] != nil {
			arg0 = args[0].(core.Querier)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuditLoger_WithQuerier_Call) Return(auditLoger store.AuditLoger) *MockAuditLoger_WithQuerier_Call {
	_c.Call.Return(auditLoger)
	return _c
}

func (_c *MockAuditLoger_WithQuerier_Call) RunAndReturn(run func(q core.Querier) store.AuditLoger) *MockAuditLoger_WithQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEntityer creates a new instance of MockEntityer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEntityer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEntityer {
	mock := &MockEntityer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEntityer is an autogenerated mock type for the Entityer type
type MockEntityer struct {
	mock.Mock
}

type MockEntityer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEntityer) EXPECT() *MockEntityer_Expecter {
	return &MockEntityer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockEntityer
func (_mock *MockEntityer) Create(ctx context.Context, entity *model.Entity) (*model.Entity, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Entity) (*model.Entity, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Entity) *model.Entity); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.Entity) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEntityer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockEntityer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *model.Entity
func (_e *MockEntityer_Expecter) Create(ctx interface{}, entity interface{}) *MockEntityer_Create_Call {
	return &MockEntityer_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockEntityer_Create_Call) Run(run func(ctx context.Context, entity *model.Entity)) *MockEntityer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Entity
		if args[1] != nil {
			arg1 = args[1].(*model.Entity)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEntityer_Create_Call) Return(entity1 *model.Entity, err error) *MockEntityer_Create_Call {
	_c.Call.Return(entity1, err)
	return _c
}

func (_c *MockEntityer_Create_Call) RunAndReturn(run func(ctx context.Context, entity *model.Entity) (*model.Entity, error)) *MockEntityer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockEntityer
func (_mock *MockEntityer) Get(ctx context.Context, id string) (*model.Entity, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Entity, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Entity); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEntityer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockEntityer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockEntityer_Expecter) Get(ctx interface{}, id interface{}) *MockEntityer_Get_Call {
	return &MockEntityer_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockEntityer_Get_Call) Run(run func(ctx context.Context, id string)) *MockEntityer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEntityer_Get_Call) Return(entity *model.Entity, err error) *MockEntityer_Get_Call {
	_c.Call.Return(entity, err)
	return _c
}

func (_c *MockEntityer_Get_Call) RunAndReturn(run func(ctx context.Context, id string) (*model.Entity, error)) *MockEntityer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockEntityer
func (_mock *MockEntityer) GetByID(ctx context.Context, id string) (*model.Entity, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Entity, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Entity); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEntityer_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockEntityer_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockEntityer_Expecter) GetByID(ctx interface{}, id interface{}) *MockEntityer_GetByID_Call {
	return &MockEntityer_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockEntityer_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockEntityer_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEntityer_GetByID_Call) Return(entity *model.Entity, err error) *MockEntityer_GetByID_Call {
	_c.Call.Return(entity, err)
	return _c
}

func (_c *MockEntityer_GetByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*model.Entity, error)) *MockEntityer_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySlug provides a mock function for the type MockEntityer
func (_mock *MockEntityer) GetBySlug(ctx context.Context, mode types.OperationMode, slug string) (*model.Entity, error) {
	ret := _mock.Called(ctx, mode, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetBySlug")
	}

	var r0 *model.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.OperationMode, string) (*model.Entity, error)); ok {
		return returnFunc(ctx, mode, slug)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.OperationMode, string) *model.Entity); ok {
		r0 = returnFunc(ctx, mode, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.OperationMode, string) error); ok {
		r1 = returnFunc(ctx, mode, slug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEntityer_GetBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySlug'
type MockEntityer_GetBySlug_Call struct {
	*mock.Call
}

// GetBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - mode types.OperationMode
//   - slug string
func (_e *MockEntityer_Expecter) GetBySlug(ctx interface{}, mode interface{}, slug interface{}) *MockEntityer_GetBySlug_Call {
	return &MockEntityer_GetBySlug_Call{Call: _e.mock.On("GetBySlug", ctx, mode, slug)}
}

func (_c *MockEntityer_GetBySlug_Call) Run(run func(ctx context.Context, mode types.OperationMode, slug string)) *MockEntityer_GetBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.OperationMode
		if args[1] != nil {
			arg1 = args[1].(types.OperationMode)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEntityer_GetBySlug_Call) Return(entity *model.Entity, err error) *MockEntityer_GetBySlug_Call {
	_c.Call.Return(entity, err)
	return _c
}

func (_c *MockEntityer_GetBySlug_Call) RunAndReturn(run func(ctx context.Context, mode types.OperationMode, slug string) (*model.Entity, error)) *MockEntityer_GetBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// WithQuerier provides a mock function for the type MockEntityer
func (_mock *MockEntityer) WithQuerier(querier core.Querier) store.Entityer {
	ret := _mock.Called(querier)

	if len(ret) == 0 {
		panic("no return value specified for WithQuerier")
	}

	var r0 store.Entityer
	if returnFunc, ok := ret.Get(0).(func(core.Querier) store.Entityer); ok {
		r0 = returnFunc(querier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Entityer)
		}
	}
	return r0
}

// MockEntityer_WithQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithQuerier'
type MockEntityer_WithQuerier_Call struct {
	*mock.Call
}

// WithQuerier is a helper method to define mock.On call
//   - querier core.Querier
func (_e *MockEntityer_Expecter) WithQuerier(querier interface{}) *MockEntityer_WithQuerier_Call {
	return &MockEntityer_WithQuerier_Call{Call: _e.mock.On("WithQuerier", querier)}
}

func (_c *MockEntityer_WithQuerier_Call) Run(run func(querier core.Querier)) *MockEntityer_WithQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.Querier
		if args[0] != nil {
			arg0 = args[0].(core.Querier)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEntityer_WithQuerier_Call) Return(entityer store.Entityer) *MockEntityer_WithQuerier_Call {
	_c.Call.Return(entityer)
	return _c
}

func (_c *MockEntityer_WithQuerier_Call) RunAndReturn(run func(querier core.Querier) store.Entityer) *MockEntityer_WithQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMembershiper creates a new instance of MockMembershiper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMembershiper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMembershiper {
	mock := &MockMembershiper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMembershiper is an autogenerated mock type for the Membershiper type
type MockMembershiper struct {
	mock.Mock
}

type MockMembershiper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMembershiper) EXPECT() *MockMembershiper_Expecter {
	return &MockMembershiper_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockMembershiper
func (_mock *MockMembershiper) Create(ctx context.Context, membership *model.Membership) (*model.Membership, error) {
	ret := _mock.Called(ctx, membership)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Membership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Membership) (*model.Membership, error)); ok {
		return returnFunc(ctx, membership)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Membership) *model.Membership); ok {
		r0 = returnFunc(ctx, membership)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Membership)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.Membership) error); ok {
		r1 = returnFunc(ctx, membership)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershiper_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMembershiper_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - membership *model.Membership
func (_e *MockMembershiper_Expecter) Create(ctx interface{}, membership interface{}) *MockMembershiper_Create_Call {
	return &MockMembershiper_Create_Call{Call: _e.mock.On("Create", ctx, membership)}
}

func (_c *MockMembershiper_Create_Call) Run(run func(ctx context.Context, membership *model.Membership)) *MockMembershiper_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Membership
		if args[1] != nil {
			arg1 = args[1].(*model.Membership)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMembershiper_Create_Call) Return(membership1 *model.Membership, err error) *MockMembershiper_Create_Call {
	_c.Call.Return(membership1, err)
	return _c
}

func (_c *MockMembershiper_Create_Call) RunAndReturn(run func(ctx context.Context, membership *model.Membership) (*model.Membership, error)) *MockMembershiper_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEntityID provides a mock function for the type MockMembershiper
func (_mock *MockMembershiper) GetByEntityID(ctx context.Context, entityID string) ([]*model.Membership, error) {
	ret := _mock.Called(ctx, entityID)

	if len(ret) == 0 {
		panic("no return value specified for GetByEntityID")
	}

	var r0 []*model.Membership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*model.Membership, error)); ok {
		return returnFunc(ctx, entityID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*model.Membership); ok {
		r0 = returnFunc(ctx, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Membership)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, entityID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershiper_GetByEntityID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEntityID'
type MockMembershiper_GetByEntityID_Call struct {
	*mock.Call
}

// GetByEntityID is a helper method to define mock.On call
//   - ctx context.Context
//   - entityID string
func (_e *MockMembershiper_Expecter) GetByEntityID(ctx interface{}, entityID interface{}) *MockMembershiper_GetByEntityID_Call {
	return &MockMembershiper_GetByEntityID_Call{Call: _e.mock.On("GetByEntityID", ctx, entityID)}
}

func (_c *MockMembershiper_GetByEntityID_Call) Run(run func(ctx context.Context, entityID string)) *MockMembershiper_GetByEntityID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMembershiper_GetByEntityID_Call) Return(memberships []*model.Membership, err error) *MockMembershiper_GetByEntityID_Call {
	_c.Call.Return(memberships, err)
	return _c
}

func (_c *MockMembershiper_GetByEntityID_Call) RunAndReturn(run func(ctx context.Context, entityID string) ([]*model.Membership, error)) *MockMembershiper_GetByEntityID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEntityIDWithInheritance provides a mock function for the type MockMembershiper
func (_mock *MockMembershiper) GetByEntityIDWithInheritance(ctx context.Context, userID string, entityID string) ([]*model.Membership, error) {
	ret := _mock.Called(ctx, userID, entityID)

	if len(ret) == 0 {
		panic("no return value specified for GetByEntityIDWithInheritance")
	}

	var r0 []*model.Membership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]*model.Membership, error)); ok {
		return returnFunc(ctx, userID, entityID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []*model.Membership); ok {
		r0 = returnFunc(ctx, userID, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Membership)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, userID, entityID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershiper_GetByEntityIDWithInheritance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEntityIDWithInheritance'
type MockMembershiper_GetByEntityIDWithInheritance_Call struct {
	*mock.Call
}

// GetByEntityIDWithInheritance is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - entityID string
func (_e *MockMembershiper_Expecter) GetByEntityIDWithInheritance(ctx interface{}, userID interface{}, entityID interface{}) *MockMembershiper_GetByEntityIDWithInheritance_Call {
	return &MockMembershiper_GetByEntityIDWithInheritance_Call{Call: _e.mock.On("GetByEntityIDWithInheritance", ctx, userID, entityID)}
}

func (_c *MockMembershiper_GetByEntityIDWithInheritance_Call) Run(run func(ctx context.Context, userID string, entityID string)) *MockMembershiper_GetByEntityIDWithInheritance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMembershiper_GetByEntityIDWithInheritance_Call) Return(memberships []*model.Membership, err error) *MockMembershiper_GetByEntityIDWithInheritance_Call {
	_c.Call.Return(memberships, err)
	return _c
}

func (_c *MockMembershiper_GetByEntityIDWithInheritance_Call) RunAndReturn(run func(ctx context.Context, userID string, entityID string) ([]*model.Membership, error)) *MockMembershiper_GetByEntityIDWithInheritance_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function for the type MockMembershiper
func (_mock *MockMembershiper) GetByUserID(ctx context.Context, userID string) ([]*model.Membership, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []*model.Membership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*model.Membership, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*model.Membership); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Membership)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershiper_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type MockMembershiper_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockMembershiper_Expecter) GetByUserID(ctx interface{}, userID interface{}) *MockMembershiper_GetByUserID_Call {
	return &MockMembershiper_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, userID)}
}

func (_c *MockMembershiper_GetByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockMembershiper_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMembershiper_GetByUserID_Call) Return(memberships []*model.Membership, err error) *MockMembershiper_GetByUserID_Call {
	_c.Call.Return(memberships, err)
	return _c
}

func (_c *MockMembershiper_GetByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]*model.Membership, error)) *MockMembershiper_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserIDWithInheritance provides a mock function for the type MockMembershiper
func (_mock *MockMembershiper) GetByUserIDWithInheritance(ctx context.Context, userID string) ([]*model.Membership, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserIDWithInheritance")
	}

	var r0 []*model.Membership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*model.Membership, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*model.Membership); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Membership)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershiper_GetByUserIDWithInheritance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserIDWithInheritance'
type MockMembershiper_GetByUserIDWithInheritance_Call struct {
	*mock.Call
}

// GetByUserIDWithInheritance is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockMembershiper_Expecter) GetByUserIDWithInheritance(ctx interface{}, userID interface{}) *MockMembershiper_GetByUserIDWithInheritance_Call {
	return &MockMembershiper_GetByUserIDWithInheritance_Call{Call: _e.mock.On("GetByUserIDWithInheritance", ctx, userID)}
}

func (_c *MockMembershiper_GetByUserIDWithInheritance_Call) Run(run func(ctx context.Context, userID string)) *MockMembershiper_GetByUserIDWithInheritance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMembershiper_GetByUserIDWithInheritance_Call) Return(memberships []*model.Membership, err error) *MockMembershiper_GetByUserIDWithInheritance_Call {
	_c.Call.Return(memberships, err)
	return _c
}

func (_c *MockMembershiper_GetByUserIDWithInheritance_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]*model.Membership, error)) *MockMembershiper_GetByUserIDWithInheritance_Call {
	_c.Call.Return(run)
	return _c
}

// WithQuerier provides a mock function for the type MockMembershiper
func (_mock *MockMembershiper) WithQuerier(q core.Querier) store.Membershiper {
	ret := _mock.Called(q)

	if len(ret) == 0 {
		panic("no return value specified for WithQuerier")
	}

	var r0 store.Membershiper
	if returnFunc, ok := ret.Get(0).(func(core.Querier) store.Membershiper); ok {
		r0 = returnFunc(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Membershiper)
		}
	}
	return r0
}

// MockMembershiper_WithQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithQuerier'
type MockMembershiper_WithQuerier_Call struct {
	*mock.Call
}

// WithQuerier is a helper method to define mock.On call
//   - q core.Querier
func (_e *MockMembershiper_Expecter) WithQuerier(q interface{}) *MockMembershiper_WithQuerier_Call {
	return &MockMembershiper_WithQuerier_Call{Call: _e.mock.On("WithQuerier", q)}
}

func (_c *MockMembershiper_WithQuerier_Call) Run(run func(q core.Querier)) *MockMembershiper_WithQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.Querier
		if args[0] != nil {
			arg0 = args[0].(core.Querier)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMembershiper_WithQuerier_Call) Return(membershiper store.Membershiper) *MockMembershiper_WithQuerier_Call {
	_c.Call.Return(membershiper)
	return _c
}

func (_c *MockMembershiper_WithQuerier_Call) RunAndReturn(run func(q core.Querier) store.Membershiper) *MockMembershiper_WithQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessioner creates a new instance of MockSessioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessioner {
	mock := &MockSessioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessioner is an autogenerated mock type for the Sessioner type
type MockSessioner struct {
	mock.Mock
}

type MockSessioner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessioner) EXPECT() *MockSessioner_Expecter {
	return &MockSessioner_Expecter{mock: &_m.Mock}
}

// CleanUpExpired provides a mock function for the type MockSessioner
func (_mock *MockSessioner) CleanUpExpired(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CleanUpExpired")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessioner_CleanUpExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanUpExpired'
type MockSessioner_CleanUpExpired_Call struct {
	*mock.Call
}

// CleanUpExpired is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSessioner_Expecter) CleanUpExpired(ctx interface{}) *MockSessioner_CleanUpExpired_Call {
	return &MockSessioner_CleanUpExpired_Call{Call: _e.mock.On("CleanUpExpired", ctx)}
}

func (_c *MockSessioner_CleanUpExpired_Call) Run(run func(ctx context.Context)) *MockSessioner_CleanUpExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessioner_CleanUpExpired_Call) Return(err error) *MockSessioner_CleanUpExpired_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessioner_CleanUpExpired_Call) RunAndReturn(run func(ctx context.Context) error) *MockSessioner_CleanUpExpired_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockSessioner
func (_mock *MockSessioner) Create(ctx context.Context, session *model.Session) (*model.Session, error) {
	ret := _mock.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Session) (*model.Session, error)); ok {
		return returnFunc(ctx, session)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Session) *model.Session); ok {
		r0 = returnFunc(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.Session) error); ok {
		r1 = returnFunc(ctx, session)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessioner_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSessioner_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - session *model.Session
func (_e *MockSessioner_Expecter) Create(ctx interface{}, session interface{}) *MockSessioner_Create_Call {
	return &MockSessioner_Create_Call{Call: _e.mock.On("Create", ctx, session)}
}

func (_c *MockSessioner_Create_Call) Run(run func(ctx context.Context, session *model.Session)) *MockSessioner_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Session
		if args[1] != nil {
			arg1 = args[1].(*model.Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessioner_Create_Call) Return(session1 *model.Session, err error) *MockSessioner_Create_Call {
	_c.Call.Return(session1, err)
	return _c
}

func (_c *MockSessioner_Create_Call) RunAndReturn(run func(ctx context.Context, session *model.Session) (*model.Session, error)) *MockSessioner_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByRefreshToken provides a mock function for the type MockSessioner
func (_mock *MockSessioner) GetByRefreshToken(ctx context.Context, refreshToken string) (*model.Session, error) {
	ret := _mock.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for GetByRefreshToken")
	}

	var r0 *model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Session, error)); ok {
		return returnFunc(ctx, refreshToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Session); ok {
		r0 = returnFunc(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessioner_GetByRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByRefreshToken'
type MockSessioner_GetByRefreshToken_Call struct {
	*mock.Call
}

// GetByRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *MockSessioner_Expecter) GetByRefreshToken(ctx interface{}, refreshToken interface{}) *MockSessioner_GetByRefreshToken_Call {
	return &MockSessioner_GetByRefreshToken_Call{Call: _e.mock.On("GetByRefreshToken", ctx, refreshToken)}
}

func (_c *MockSessioner_GetByRefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *MockSessioner_GetByRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessioner_GetByRefreshToken_Call) Return(session *model.Session, err error) *MockSessioner_GetByRefreshToken_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessioner_GetByRefreshToken_Call) RunAndReturn(run func(ctx context.Context, refreshToken string) (*model.Session, error)) *MockSessioner_GetByRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetByToken provides a mock function for the type MockSessioner
func (_mock *MockSessioner) GetByToken(ctx context.Context, token string) (*model.Session, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Session, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Session); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessioner_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type MockSessioner_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessioner_Expecter) GetByToken(ctx interface{}, token interface{}) *MockSessioner_GetByToken_Call {
	return &MockSessioner_GetByToken_Call{Call: _e.mock.On("GetByToken", ctx, token)}
}

func (_c *MockSessioner_GetByToken_Call) Run(run func(ctx context.Context, token string)) *MockSessioner_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessioner_GetByToken_Call) Return(session *model.Session, err error) *MockSessioner_GetByToken_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessioner_GetByToken_Call) RunAndReturn(run func(ctx context.Context, token string) (*model.Session, error)) *MockSessioner_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateByID provides a mock function for the type MockSessioner
func (_mock *MockSessioner) InvalidateByID(ctx context.Context, id string, userID string) error {
	ret := _mock.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessioner_InvalidateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateByID'
type MockSessioner_InvalidateByID_Call struct {
	*mock.Call
}

// InvalidateByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - userID string
func (_e *MockSessioner_Expecter) InvalidateByID(ctx interface{}, id interface{}, userID interface{}) *MockSessioner_InvalidateByID_Call {
	return &MockSessioner_InvalidateByID_Call{Call: _e.mock.On("InvalidateByID", ctx, id, userID)}
}

func (_c *MockSessioner_InvalidateByID_Call) Run(run func(ctx context.Context, id string, userID string)) *MockSessioner_InvalidateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessioner_InvalidateByID_Call) Return(err error) *MockSessioner_InvalidateByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessioner_InvalidateByID_Call) RunAndReturn(run func(ctx context.Context, id string, userID string) error) *MockSessioner_InvalidateByID_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateByToken provides a mock function for the type MockSessioner
func (_mock *MockSessioner) InvalidateByToken(ctx context.Context, token string) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateByToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessioner_InvalidateByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateByToken'
type MockSessioner_InvalidateByToken_Call struct {
	*mock.Call
}

// InvalidateByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessioner_Expecter) InvalidateByToken(ctx interface{}, token interface{}) *MockSessioner_InvalidateByToken_Call {
	return &MockSessioner_InvalidateByToken_Call{Call: _e.mock.On("InvalidateByToken", ctx, token)}
}

func (_c *MockSessioner_InvalidateByToken_Call) Run(run func(ctx context.Context, token string)) *MockSessioner_InvalidateByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessioner_InvalidateByToken_Call) Return(err error) *MockSessioner_InvalidateByToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessioner_InvalidateByToken_Call) RunAndReturn(run func(ctx context.Context, token string) error) *MockSessioner_InvalidateByToken_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateByUserID provides a mock function for the type MockSessioner
func (_mock *MockSessioner) InvalidateByUserID(ctx context.Context, userID string, token string) error {
	ret := _mock.Called(ctx, userID, token)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateByUserID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, userID, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessioner_InvalidateByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateByUserID'
type MockSessioner_InvalidateByUserID_Call struct {
	*mock.Call
}

// InvalidateByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - token string
func (_e *MockSessioner_Expecter) InvalidateByUserID(ctx interface{}, userID interface{}, token interface{}) *MockSessioner_InvalidateByUserID_Call {
	return &MockSessioner_InvalidateByUserID_Call{Call: _e.mock.On("InvalidateByUserID", ctx, userID, token)}
}

func (_c *MockSessioner_InvalidateByUserID_Call) Run(run func(ctx context.Context, userID string, token string)) *MockSessioner_InvalidateByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessioner_InvalidateByUserID_Call) Return(err error) *MockSessioner_InvalidateByUserID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessioner_InvalidateByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string, token string) error) *MockSessioner_InvalidateByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUser provides a mock function for the type MockSessioner
func (_mock *MockSessioner) ListByUser(ctx context.Context, userID string) ([]*model.Session, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListByUser")
	}

	var r0 []*model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*model.Session, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*model.Session); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessioner_ListByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUser'
type MockSessioner_ListByUser_Call struct {
	*mock.Call
}

// ListByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockSessioner_Expecter) ListByUser(ctx interface{}, userID interface{}) *MockSessioner_ListByUser_Call {
	return &MockSessioner_ListByUser_Call{Call: _e.mock.On("ListByUser", ctx, userID)}
}

func (_c *MockSessioner_ListByUser_Call) Run(run func(ctx context.Context, userID string)) *MockSessioner_ListByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessioner_ListByUser_Call) Return(sessions []*model.Session, err error) *MockSessioner_ListByUser_Call {
	_c.Call.Return(sessions, err)
	return _c
}

func (_c *MockSessioner_ListByUser_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]*model.Session, error)) *MockSessioner_ListByUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTwoFactorPending provides a mock function for the type MockSessioner
func (_mock *MockSessioner) UpdateTwoFactorPending(ctx context.Context, token string, isPending bool) error {
	ret := _mock.Called(ctx, token, isPending)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTwoFactorPending")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = returnFunc(ctx, token, isPending)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessioner_UpdateTwoFactorPending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTwoFactorPending'
type MockSessioner_UpdateTwoFactorPending_Call struct {
	*mock.Call
}

// UpdateTwoFactorPending is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - isPending bool
func (_e *MockSessioner_Expecter) UpdateTwoFactorPending(ctx interface{}, token interface{}, isPending interface{}) *MockSessioner_UpdateTwoFactorPending_Call {
	return &MockSessioner_UpdateTwoFactorPending_Call{Call: _e.mock.On("UpdateTwoFactorPending", ctx, token, isPending)}
}

func (_c *MockSessioner_UpdateTwoFactorPending_Call) Run(run func(ctx context.Context, token string, isPending bool)) *MockSessioner_UpdateTwoFactorPending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessioner_UpdateTwoFactorPending_Call) Return(err error) *MockSessioner_UpdateTwoFactorPending_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessioner_UpdateTwoFactorPending_Call) RunAndReturn(run func(ctx context.Context, token string, isPending bool) error) *MockSessioner_UpdateTwoFactorPending_Call {
	_c.Call.Return(run)
	return _c
}

// WithQuerier provides a mock function for the type MockSessioner
func (_mock *MockSessioner) WithQuerier(q core.Querier) store.Sessioner {
	ret := _mock.Called(q)

	if len(ret) == 0 {
		panic("no return value specified for WithQuerier")
	}

	var r0 store.Sessioner
	if returnFunc, ok := ret.Get(0).(func(core.Querier) store.Sessioner); ok {
		r0 = returnFunc(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Sessioner)
		}
	}
	return r0
}

// MockSessioner_WithQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithQuerier'
type MockSessioner_WithQuerier_Call struct {
	*mock.Call
}

// WithQuerier is a helper method to define mock.On call
//   - q core.Querier
func (_e *MockSessioner_Expecter) WithQuerier(q interface{}) *MockSessioner_WithQuerier_Call {
	return &MockSessioner_WithQuerier_Call{Call: _e.mock.On("WithQuerier", q)}
}

func (_c *MockSessioner_WithQuerier_Call) Run(run func(q core.Querier)) *MockSessioner_WithQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.Querier
		if args[0] != nil {
			arg0 = args[0].(core.Querier)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessioner_WithQuerier_Call) Return(sessioner store.Sessioner) *MockSessioner_WithQuerier_Call {
	_c.Call.Return(sessioner)
	return _c
}

func (_c *MockSessioner_WithQuerier_Call) RunAndReturn(run func(q core.Querier) store.Sessioner) *MockSessioner_WithQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTwoFactorer creates a new instance of MockTwoFactorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTwoFactorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTwoFactorer {
	mock := &MockTwoFactorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTwoFactorer is an autogenerated mock type for the TwoFactorer type
type MockTwoFactorer struct {
	mock.Mock
}

type MockTwoFactorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTwoFactorer) EXPECT() *MockTwoFactorer_Expecter {
	return &MockTwoFactorer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockTwoFactorer
func (_mock *MockTwoFactorer) Create(ctx context.Context, twoFactor *model.TwoFactor) (*model.TwoFactor, error) {
	ret := _mock.Called(ctx, twoFactor)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.TwoFactor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.TwoFactor) (*model.TwoFactor, error)); ok {
		return returnFunc(ctx, twoFactor)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.TwoFactor) *model.TwoFactor); ok {
		r0 = returnFunc(ctx, twoFactor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TwoFactor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.TwoFactor) error); ok {
		r1 = returnFunc(ctx, twoFactor)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTwoFactorer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTwoFactorer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - twoFactor *model.TwoFactor
func (_e *MockTwoFactorer_Expecter) Create(ctx interface{}, twoFactor interface{}) *MockTwoFactorer_Create_Call {
	return &MockTwoFactorer_Create_Call{Call: _e.mock.On("Create", ctx, twoFactor)}
}

func (_c *MockTwoFactorer_Create_Call) Run(run func(ctx context.Context, twoFactor *model.TwoFactor)) *MockTwoFactorer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.TwoFactor
		if args[1] != nil {
			arg1 = args[1].(*model.TwoFactor)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTwoFactorer_Create_Call) Return(twoFactor1 *model.TwoFactor, err error) *MockTwoFactorer_Create_Call {
	_c.Call.Return(twoFactor1, err)
	return _c
}

func (_c *MockTwoFactorer_Create_Call) RunAndReturn(run func(ctx context.Context, twoFactor *model.TwoFactor) (*model.TwoFactor, error)) *MockTwoFactorer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockTwoFactorer
func (_mock *MockTwoFactorer) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTwoFactorer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTwoFactorer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockTwoFactorer_Expecter) Delete(ctx interface{}, id interface{}) *MockTwoFactorer_Delete_Call {
	return &MockTwoFactorer_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockTwoFactorer_Delete_Call) Run(run func(ctx context.Context, id string)) *MockTwoFactorer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTwoFactorer_Delete_Call) Return(err error) *MockTwoFactorer_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTwoFactorer_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockTwoFactorer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockTwoFactorer
func (_mock *MockTwoFactorer) GetByID(ctx context.Context, id string) (*model.TwoFactor, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.TwoFactor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.TwoFactor, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.TwoFactor); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TwoFactor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTwoFactorer_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockTwoFactorer_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockTwoFactorer_Expecter) GetByID(ctx interface{}, id interface{}) *MockTwoFactorer_GetByID_Call {
	return &MockTwoFactorer_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockTwoFactorer_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockTwoFactorer_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTwoFactorer_GetByID_Call) Return(twoFactor *model.TwoFactor, err error) *MockTwoFactorer_GetByID_Call {
	_c.Call.Return(twoFactor, err)
	return _c
}

func (_c *MockTwoFactorer_GetByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*model.TwoFactor, error)) *MockTwoFactorer_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function for the type MockTwoFactorer
func (_mock *MockTwoFactorer) GetByUserID(ctx context.Context, userID string) (*model.TwoFactor, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 *model.TwoFactor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.TwoFactor, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.TwoFactor); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TwoFactor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTwoFactorer_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type MockTwoFactorer_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockTwoFactorer_Expecter) GetByUserID(ctx interface{}, userID interface{}) *MockTwoFactorer_GetByUserID_Call {
	return &MockTwoFactorer_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, userID)}
}

func (_c *MockTwoFactorer_GetByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockTwoFactorer_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTwoFactorer_GetByUserID_Call) Return(twoFactor *model.TwoFactor, err error) *MockTwoFactorer_GetByUserID_Call {
	_c.Call.Return(twoFactor, err)
	return _c
}

func (_c *MockTwoFactorer_GetByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) (*model.TwoFactor, error)) *MockTwoFactorer_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockTwoFactorer
func (_mock *MockTwoFactorer) Update(ctx context.Context, twoFactor *model.TwoFactor) error {
	ret := _mock.Called(ctx, twoFactor)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.TwoFactor) error); ok {
		r0 = returnFunc(ctx, twoFactor)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTwoFactorer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTwoFactorer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - twoFactor *model.TwoFactor
func (_e *MockTwoFactorer_Expecter) Update(ctx interface{}, twoFactor interface{}) *MockTwoFactorer_Update_Call {
	return &MockTwoFactorer_Update_Call{Call: _e.mock.On("Update", ctx, twoFactor)}
}

func (_c *MockTwoFactorer_Update_Call) Run(run func(ctx context.Context, twoFactor *model.TwoFactor)) *MockTwoFactorer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.TwoFactor
		if args[1] != nil {
			arg1 = args[1].(*model.TwoFactor)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTwoFactorer_Update_Call) Return(err error) *MockTwoFactorer_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTwoFactorer_Update_Call) RunAndReturn(run func(ctx context.Context, twoFactor *model.TwoFactor) error) *MockTwoFactorer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithQuerier provides a mock function for the type MockTwoFactorer
func (_mock *MockTwoFactorer) WithQuerier(q core.Querier) store.TwoFactorer {
	ret := _mock.Called(q)

	if len(ret) == 0 {
		panic("no return value specified for WithQuerier")
	}

	var r0 store.TwoFactorer
	if returnFunc, ok := ret.Get(0).(func(core.Querier) store.TwoFactorer); ok {
		r0 = returnFunc(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.TwoFactorer)
		}
	}
	return r0
}

// MockTwoFactorer_WithQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithQuerier'
type MockTwoFactorer_WithQuerier_Call struct {
	*mock.Call
}

// WithQuerier is a helper method to define mock.On call
//   - q core.Querier
func (_e *MockTwoFactorer_Expecter) WithQuerier(q interface{}) *MockTwoFactorer_WithQuerier_Call {
	return &MockTwoFactorer_WithQuerier_Call{Call: _e.mock.On("WithQuerier", q)}
}

func (_c *MockTwoFactorer_WithQuerier_Call) Run(run func(q core.Querier)) *MockTwoFactorer_WithQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.Querier
		if args[0] != nil {
			arg0 = args[0].(core.Querier)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTwoFactorer_WithQuerier_Call) Return(twoFactorer store.TwoFactorer) *MockTwoFactorer_WithQuerier_Call {
	_c.Call.Return(twoFactorer)
	return _c
}

func (_c *MockTwoFactorer_WithQuerier_Call) RunAndReturn(run func(q core.Querier) store.TwoFactorer) *MockTwoFactorer_WithQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserer creates a new instance of MockUserer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserer {
	mock := &MockUserer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserer is an autogenerated mock type for the Userer type
type MockUserer struct {
	mock.Mock
}

type MockUserer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserer) EXPECT() *MockUserer_Expecter {
	return &MockUserer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUserer
func (_mock *MockUserer) Create(ctx context.Context, user *model.User) (*model.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) (*model.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) *model.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockUserer_Expecter) Create(ctx interface{}, user interface{}) *MockUserer_Create_Call {
	return &MockUserer_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockUserer_Create_Call) Run(run func(ctx context.Context, user *model.User)) *MockUserer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.User
		if args[1] != nil {
			arg1 = args[1].(*model.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserer_Create_Call) Return(user1 *model.User, err error) *MockUserer_Create_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserer_Create_Call) RunAndReturn(run func(ctx context.Context, user *model.User) (*model.User, error)) *MockUserer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVerification provides a mock function for the type MockUserer
func (_mock *MockUserer) CreateVerification(ctx context.Context, verification *model.Verification) (*model.Verification, error) {
	ret := _mock.Called(ctx, verification)

	if len(ret) == 0 {
		panic("no return value specified for CreateVerification")
	}

	var r0 *model.Verification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Verification) (*model.Verification, error)); ok {
		return returnFunc(ctx, verification)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Verification) *model.Verification); ok {
		r0 = returnFunc(ctx, verification)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Verification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.Verification) error); ok {
		r1 = returnFunc(ctx, verification)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserer_CreateVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVerification'
type MockUserer_CreateVerification_Call struct {
	*mock.Call
}

// CreateVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - verification *model.Verification
func (_e *MockUserer_Expecter) CreateVerification(ctx interface{}, verification interface{}) *MockUserer_CreateVerification_Call {
	return &MockUserer_CreateVerification_Call{Call: _e.mock.On("CreateVerification", ctx, verification)}
}

func (_c *MockUserer_CreateVerification_Call) Run(run func(ctx context.Context, verification *model.Verification)) *MockUserer_CreateVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Verification
		if args[1] != nil {
			arg1 = args[1].(*model.Verification)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserer_CreateVerification_Call) Return(verification1 *model.Verification, err error) *MockUserer_CreateVerification_Call {
	_c.Call.Return(verification1, err)
	return _c
}

func (_c *MockUserer_CreateVerification_Call) RunAndReturn(run func(ctx context.Context, verification *model.Verification) (*model.Verification, error)) *MockUserer_CreateVerification_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVerification provides a mock function for the type MockUserer
func (_mock *MockUserer) DeleteVerification(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVerification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserer_DeleteVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVerification'
type MockUserer_DeleteVerification_Call struct {
	*mock.Call
}

// DeleteVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserer_Expecter) DeleteVerification(ctx interface{}, id interface{}) *MockUserer_DeleteVerification_Call {
	return &MockUserer_DeleteVerification_Call{Call: _e.mock.On("DeleteVerification", ctx, id)}
}

func (_c *MockUserer_DeleteVerification_Call) Run(run func(ctx context.Context, id string)) *MockUserer_DeleteVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserer_DeleteVerification_Call) Return(err error) *MockUserer_DeleteVerification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserer_DeleteVerification_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockUserer_DeleteVerification_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsByEmail provides a mock function for the type MockUserer
func (_mock *MockUserer) ExistsByEmail(ctx context.Context, email string) (bool, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByEmail")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserer_ExistsByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsByEmail'
type MockUserer_ExistsByEmail_Call struct {
	*mock.Call
}

// ExistsByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserer_Expecter) ExistsByEmail(ctx interface{}, email interface{}) *MockUserer_ExistsByEmail_Call {
	return &MockUserer_ExistsByEmail_Call{Call: _e.mock.On("ExistsByEmail", ctx, email)}
}

func (_c *MockUserer_ExistsByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserer_ExistsByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserer_ExistsByEmail_Call) Return(b bool, err error) *MockUserer_ExistsByEmail_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockUserer_ExistsByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (bool, error)) *MockUserer_ExistsByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type MockUserer
func (_mock *MockUserer) GetByEmail(ctx context.Context, email string) (*model.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserer_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUserer_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserer_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUserer_GetByEmail_Call {
	return &MockUserer_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUserer_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserer_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserer_GetByEmail_Call) Return(user *model.User, err error) *MockUserer_GetByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserer_GetByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*model.User, error)) *MockUserer_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockUserer
func (_mock *MockUserer) GetByID(ctx context.Context, id string) (*model.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserer_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUserer_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserer_Expecter) GetByID(ctx interface{}, id interface{}) *MockUserer_GetByID_Call {
	return &MockUserer_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockUserer_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockUserer_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserer_GetByID_Call) Return(user *model.User, err error) *MockUserer_GetByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserer_GetByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*model.User, error)) *MockUserer_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetVerification provides a mock function for the type MockUserer
func (_mock *MockUserer) GetVerification(ctx context.Context, context1 string, id string) (*model.Verification, error) {
	ret := _mock.Called(ctx, context1, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVerification")
	}

	var r0 *model.Verification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*model.Verification, error)); ok {
		return returnFunc(ctx, context1, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *model.Verification); ok {
		r0 = returnFunc(ctx, context1, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Verification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, context1, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserer_GetVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVerification'
type MockUserer_GetVerification_Call struct {
	*mock.Call
}

// GetVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - context1 string
//   - id string
func (_e *MockUserer_Expecter) GetVerification(ctx interface{}, context1 interface{}, id interface{}) *MockUserer_GetVerification_Call {
	return &MockUserer_GetVerification_Call{Call: _e.mock.On("GetVerification", ctx, context1, id)}
}

func (_c *MockUserer_GetVerification_Call) Run(run func(ctx context.Context, context1 string, id string)) *MockUserer_GetVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserer_GetVerification_Call) Return(verification *model.Verification, err error) *MockUserer_GetVerification_Call {
	_c.Call.Return(verification, err)
	return _c
}

func (_c *MockUserer_GetVerification_Call) RunAndReturn(run func(ctx context.Context, context1 string, id string) (*model.Verification, error)) *MockUserer_GetVerification_Call {
	_c.Call.Return(run)
	return _c
}

// GetVerificationByValue provides a mock function for the type MockUserer
func (_mock *MockUserer) GetVerificationByValue(ctx context.Context, context1 string, value string) (*model.Verification, error) {
	ret := _mock.Called(ctx, context1, value)

	if len(ret) == 0 {
		panic("no return value specified for GetVerificationByValue")
	}

	var r0 *model.Verification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*model.Verification, error)); ok {
		return returnFunc(ctx, context1, value)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *model.Verification); ok {
		r0 = returnFunc(ctx, context1, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Verification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, context1, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserer_GetVerificationByValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVerificationByValue'
type MockUserer_GetVerificationByValue_Call struct {
	*mock.Call
}

// GetVerificationByValue is a helper method to define mock.On call
//   - ctx context.Context
//   - context1 string
//   - value string
func (_e *MockUserer_Expecter) GetVerificationByValue(ctx interface{}, context1 interface{}, value interface{}) *MockUserer_GetVerificationByValue_Call {
	return &MockUserer_GetVerificationByValue_Call{Call: _e.mock.On("GetVerificationByValue", ctx, context1, value)}
}

func (_c *MockUserer_GetVerificationByValue_Call) Run(run func(ctx context.Context, context1 string, value string)) *MockUserer_GetVerificationByValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserer_GetVerificationByValue_Call) Return(verification *model.Verification, err error) *MockUserer_GetVerificationByValue_Call {
	_c.Call.Return(verification, err)
	return _c
}

func (_c *MockUserer_GetVerificationByValue_Call) RunAndReturn(run func(ctx context.Context, context1 string, value string) (*model.Verification, error)) *MockUserer_GetVerificationByValue_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockUserer
func (_mock *MockUserer) Update(ctx context.Context, user *model.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockUserer_Expecter) Update(ctx interface{}, user interface{}) *MockUserer_Update_Call {
	return &MockUserer_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *MockUserer_Update_Call) Run(run func(ctx context.Context, user *model.User)) *MockUserer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.User
		if args[1] != nil {
			arg1 = args[1].(*model.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserer_Update_Call) Return(err error) *MockUserer_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserer_Update_Call) RunAndReturn(run func(ctx context.Context, user *model.User) error) *MockUserer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithQuerier provides a mock function for the type MockUserer
func (_mock *MockUserer) WithQuerier(q core.Querier) store.Userer {
	ret := _mock.Called(q)

	if len(ret) == 0 {
		panic("no return value specified for WithQuerier")
	}

	var r0 store.Userer
	if returnFunc, ok := ret.Get(0).(func(core.Querier) store.Userer); ok {
		r0 = returnFunc(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Userer)
		}
	}
	return r0
}

// MockUserer_WithQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithQuerier'
type MockUserer_WithQuerier_Call struct {
	*mock.Call
}

// WithQuerier is a helper method to define mock.On call
//   - q core.Querier
func (_e *MockUserer_Expecter) WithQuerier(q interface{}) *MockUserer_WithQuerier_Call {
	return &MockUserer_WithQuerier_Call{Call: _e.mock.On("WithQuerier", q)}
}

func (_c *MockUserer_WithQuerier_Call) Run(run func(q core.Querier)) *MockUserer_WithQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.Querier
		if args[0] != nil {
			arg0 = args[0].(core.Querier)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserer_WithQuerier_Call) Return(userer store.Userer) *MockUserer_WithQuerier_Call {
	_c.Call.Return(userer)
	return _c
}

func (_c *MockUserer_WithQuerier_Call) RunAndReturn(run func(q core.Querier) store.Userer) *MockUserer_WithQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerificationer creates a new instance of MockVerificationer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerificationer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerificationer {
	mock := &MockVerificationer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVerificationer is an autogenerated mock type for the Verificationer type
type MockVerificationer struct {
	mock.Mock
}

type MockVerificationer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerificationer) EXPECT() *MockVerificationer_Expecter {
	return &MockVerificationer_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockVerificationer
func (_mock *MockVerificationer) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVerificationer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockVerificationer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockVerificationer_Expecter) Delete(ctx interface{}, id interface{}) *MockVerificationer_Delete_Call {
	return &MockVerificationer_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockVerificationer_Delete_Call) Run(run func(ctx context.Context, id string)) *MockVerificationer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVerificationer_Delete_Call) Return(err error) *MockVerificationer_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVerificationer_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockVerificationer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByValue provides a mock function for the type MockVerificationer
func (_mock *MockVerificationer) GetByValue(ctx context.Context, context1 string, value string) (*model.Verification, error) {
	ret := _mock.Called(ctx, context1, value)

	if len(ret) == 0 {
		panic("no return value specified for GetByValue")
	}

	var r0 *model.Verification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*model.Verification, error)); ok {
		return returnFunc(ctx, context1, value)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *model.Verification); ok {
		r0 = returnFunc(ctx, context1, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Verification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, context1, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVerificationer_GetByValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByValue'
type MockVerificationer_GetByValue_Call struct {
	*mock.Call
}

// GetByValue is a helper method to define mock.On call
//   - ctx context.Context
//   - context1 string
//   - value string
func (_e *MockVerificationer_Expecter) GetByValue(ctx interface{}, context1 interface{}, value interface{}) *MockVerificationer_GetByValue_Call {
	return &MockVerificationer_GetByValue_Call{Call: _e.mock.On("GetByValue", ctx, context1, value)}
}

func (_c *MockVerificationer_GetByValue_Call) Run(run func(ctx context.Context, context1 string, value string)) *MockVerificationer_GetByValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockVerificationer_GetByValue_Call) Return(verification *model.Verification, err error) *MockVerificationer_GetByValue_Call {
	_c.Call.Return(verification, err)
	return _c
}

func (_c *MockVerificationer_GetByValue_Call) RunAndReturn(run func(ctx context.Context, context1 string, value string) (*model.Verification, error)) *MockVerificationer_GetByValue_Call {
	_c.Call.Return(run)
	return _c
}

// WithQuerier provides a mock function for the type MockVerificationer
func (_mock *MockVerificationer) WithQuerier(q core.Querier) store.Verificationer {
	ret := _mock.Called(q)

	if len(ret) == 0 {
		panic("no return value specified for WithQuerier")
	}

	var r0 store.Verificationer
	if returnFunc, ok := ret.Get(0).(func(core.Querier) store.Verificationer); ok {
		r0 = returnFunc(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Verificationer)
		}
	}
	return r0
}

// MockVerificationer_WithQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithQuerier'
type MockVerificationer_WithQuerier_Call struct {
	*mock.Call
}

// WithQuerier is a helper method to define mock.On call
//   - q core.Querier
func (_e *MockVerificationer_Expecter) WithQuerier(q interface{}) *MockVerificationer_WithQuerier_Call {
	return &MockVerificationer_WithQuerier_Call{Call: _e.mock.On("WithQuerier", q)}
}

func (_c *MockVerificationer_WithQuerier_Call) Run(run func(q core.Querier)) *MockVerificationer_WithQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 core.Querier
		if args[0] != nil {
			arg0 = args[0].(core.Querier)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVerificationer_WithQuerier_Call) Return(verificationer store.Verificationer) *MockVerificationer_WithQuerier_Call {
	_c.Call.Return(verificationer)
	return _c
}

func (_c *MockVerificationer_WithQuerier_Call) RunAndReturn(run func(q core.Querier) store.Verificationer) *MockVerificationer_WithQuerier_Call {
	_c.Call.Return(run)
	return _c
}
