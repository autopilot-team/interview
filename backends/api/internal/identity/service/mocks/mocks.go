// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"autopilot/backends/api/internal/identity/model"
	"autopilot/backends/api/internal/identity/service"
	"autopilot/backends/internal/types"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockEntityer creates a new instance of MockEntityer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEntityer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEntityer {
	mock := &MockEntityer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEntityer is an autogenerated mock type for the Entityer type
type MockEntityer struct {
	mock.Mock
}

type MockEntityer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEntityer) EXPECT() *MockEntityer_Expecter {
	return &MockEntityer_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockEntityer
func (_mock *MockEntityer) Get(ctx context.Context, id string) (*model.Entity, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Entity, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Entity); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEntityer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockEntityer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockEntityer_Expecter) Get(ctx interface{}, id interface{}) *MockEntityer_Get_Call {
	return &MockEntityer_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockEntityer_Get_Call) Run(run func(ctx context.Context, id string)) *MockEntityer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEntityer_Get_Call) Return(entity *model.Entity, err error) *MockEntityer_Get_Call {
	_c.Call.Return(entity, err)
	return _c
}

func (_c *MockEntityer_Get_Call) RunAndReturn(run func(ctx context.Context, id string) (*model.Entity, error)) *MockEntityer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockEntityer
func (_mock *MockEntityer) GetByID(ctx context.Context, id string) (*model.Entity, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Entity, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Entity); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEntityer_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockEntityer_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockEntityer_Expecter) GetByID(ctx interface{}, id interface{}) *MockEntityer_GetByID_Call {
	return &MockEntityer_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockEntityer_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockEntityer_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEntityer_GetByID_Call) Return(entity *model.Entity, err error) *MockEntityer_GetByID_Call {
	_c.Call.Return(entity, err)
	return _c
}

func (_c *MockEntityer_GetByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*model.Entity, error)) *MockEntityer_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySlug provides a mock function for the type MockEntityer
func (_mock *MockEntityer) GetBySlug(ctx context.Context, mode types.OperationMode, slug string) (*model.Entity, error) {
	ret := _mock.Called(ctx, mode, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetBySlug")
	}

	var r0 *model.Entity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.OperationMode, string) (*model.Entity, error)); ok {
		return returnFunc(ctx, mode, slug)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.OperationMode, string) *model.Entity); ok {
		r0 = returnFunc(ctx, mode, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Entity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.OperationMode, string) error); ok {
		r1 = returnFunc(ctx, mode, slug)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEntityer_GetBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySlug'
type MockEntityer_GetBySlug_Call struct {
	*mock.Call
}

// GetBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - mode types.OperationMode
//   - slug string
func (_e *MockEntityer_Expecter) GetBySlug(ctx interface{}, mode interface{}, slug interface{}) *MockEntityer_GetBySlug_Call {
	return &MockEntityer_GetBySlug_Call{Call: _e.mock.On("GetBySlug", ctx, mode, slug)}
}

func (_c *MockEntityer_GetBySlug_Call) Run(run func(ctx context.Context, mode types.OperationMode, slug string)) *MockEntityer_GetBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.OperationMode
		if args[1] != nil {
			arg1 = args[1].(types.OperationMode)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEntityer_GetBySlug_Call) Return(entity *model.Entity, err error) *MockEntityer_GetBySlug_Call {
	_c.Call.Return(entity, err)
	return _c
}

func (_c *MockEntityer_GetBySlug_Call) RunAndReturn(run func(ctx context.Context, mode types.OperationMode, slug string) (*model.Entity, error)) *MockEntityer_GetBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMembershiper creates a new instance of MockMembershiper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMembershiper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMembershiper {
	mock := &MockMembershiper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMembershiper is an autogenerated mock type for the Membershiper type
type MockMembershiper struct {
	mock.Mock
}

type MockMembershiper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMembershiper) EXPECT() *MockMembershiper_Expecter {
	return &MockMembershiper_Expecter{mock: &_m.Mock}
}

// GetByEntityID provides a mock function for the type MockMembershiper
func (_mock *MockMembershiper) GetByEntityID(ctx context.Context, entityID string) ([]*model.Membership, error) {
	ret := _mock.Called(ctx, entityID)

	if len(ret) == 0 {
		panic("no return value specified for GetByEntityID")
	}

	var r0 []*model.Membership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*model.Membership, error)); ok {
		return returnFunc(ctx, entityID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*model.Membership); ok {
		r0 = returnFunc(ctx, entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Membership)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, entityID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershiper_GetByEntityID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEntityID'
type MockMembershiper_GetByEntityID_Call struct {
	*mock.Call
}

// GetByEntityID is a helper method to define mock.On call
//   - ctx context.Context
//   - entityID string
func (_e *MockMembershiper_Expecter) GetByEntityID(ctx interface{}, entityID interface{}) *MockMembershiper_GetByEntityID_Call {
	return &MockMembershiper_GetByEntityID_Call{Call: _e.mock.On("GetByEntityID", ctx, entityID)}
}

func (_c *MockMembershiper_GetByEntityID_Call) Run(run func(ctx context.Context, entityID string)) *MockMembershiper_GetByEntityID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMembershiper_GetByEntityID_Call) Return(memberships []*model.Membership, err error) *MockMembershiper_GetByEntityID_Call {
	_c.Call.Return(memberships, err)
	return _c
}

func (_c *MockMembershiper_GetByEntityID_Call) RunAndReturn(run func(ctx context.Context, entityID string) ([]*model.Membership, error)) *MockMembershiper_GetByEntityID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function for the type MockMembershiper
func (_mock *MockMembershiper) GetByUserID(ctx context.Context, userID string) ([]*model.Membership, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []*model.Membership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*model.Membership, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*model.Membership); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Membership)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershiper_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type MockMembershiper_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockMembershiper_Expecter) GetByUserID(ctx interface{}, userID interface{}) *MockMembershiper_GetByUserID_Call {
	return &MockMembershiper_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, userID)}
}

func (_c *MockMembershiper_GetByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockMembershiper_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMembershiper_GetByUserID_Call) Return(memberships []*model.Membership, err error) *MockMembershiper_GetByUserID_Call {
	_c.Call.Return(memberships, err)
	return _c
}

func (_c *MockMembershiper_GetByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]*model.Membership, error)) *MockMembershiper_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserIDWithInheritance provides a mock function for the type MockMembershiper
func (_mock *MockMembershiper) GetByUserIDWithInheritance(ctx context.Context, userID string) ([]*model.Membership, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserIDWithInheritance")
	}

	var r0 []*model.Membership
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*model.Membership, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*model.Membership); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Membership)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMembershiper_GetByUserIDWithInheritance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserIDWithInheritance'
type MockMembershiper_GetByUserIDWithInheritance_Call struct {
	*mock.Call
}

// GetByUserIDWithInheritance is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockMembershiper_Expecter) GetByUserIDWithInheritance(ctx interface{}, userID interface{}) *MockMembershiper_GetByUserIDWithInheritance_Call {
	return &MockMembershiper_GetByUserIDWithInheritance_Call{Call: _e.mock.On("GetByUserIDWithInheritance", ctx, userID)}
}

func (_c *MockMembershiper_GetByUserIDWithInheritance_Call) Run(run func(ctx context.Context, userID string)) *MockMembershiper_GetByUserIDWithInheritance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMembershiper_GetByUserIDWithInheritance_Call) Return(memberships []*model.Membership, err error) *MockMembershiper_GetByUserIDWithInheritance_Call {
	_c.Call.Return(memberships, err)
	return _c
}

func (_c *MockMembershiper_GetByUserIDWithInheritance_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]*model.Membership, error)) *MockMembershiper_GetByUserIDWithInheritance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessioner creates a new instance of MockSessioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessioner {
	mock := &MockSessioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessioner is an autogenerated mock type for the Sessioner type
type MockSessioner struct {
	mock.Mock
}

type MockSessioner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessioner) EXPECT() *MockSessioner_Expecter {
	return &MockSessioner_Expecter{mock: &_m.Mock}
}

// CleanUpExpired provides a mock function for the type MockSessioner
func (_mock *MockSessioner) CleanUpExpired(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CleanUpExpired")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessioner_CleanUpExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanUpExpired'
type MockSessioner_CleanUpExpired_Call struct {
	*mock.Call
}

// CleanUpExpired is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSessioner_Expecter) CleanUpExpired(ctx interface{}) *MockSessioner_CleanUpExpired_Call {
	return &MockSessioner_CleanUpExpired_Call{Call: _e.mock.On("CleanUpExpired", ctx)}
}

func (_c *MockSessioner_CleanUpExpired_Call) Run(run func(ctx context.Context)) *MockSessioner_CleanUpExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessioner_CleanUpExpired_Call) Return(err error) *MockSessioner_CleanUpExpired_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessioner_CleanUpExpired_Call) RunAndReturn(run func(ctx context.Context) error) *MockSessioner_CleanUpExpired_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockSessioner
func (_mock *MockSessioner) Create(ctx context.Context, email string, password string) (*model.Session, error) {
	ret := _mock.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*model.Session, error)); ok {
		return returnFunc(ctx, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *model.Session); ok {
		r0 = returnFunc(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessioner_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSessioner_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *MockSessioner_Expecter) Create(ctx interface{}, email interface{}, password interface{}) *MockSessioner_Create_Call {
	return &MockSessioner_Create_Call{Call: _e.mock.On("Create", ctx, email, password)}
}

func (_c *MockSessioner_Create_Call) Run(run func(ctx context.Context, email string, password string)) *MockSessioner_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessioner_Create_Call) Return(session *model.Session, err error) *MockSessioner_Create_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessioner_Create_Call) RunAndReturn(run func(ctx context.Context, email string, password string) (*model.Session, error)) *MockSessioner_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByToken provides a mock function for the type MockSessioner
func (_mock *MockSessioner) GetByToken(ctx context.Context, token string) (*model.Session, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Session, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Session); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessioner_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type MockSessioner_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessioner_Expecter) GetByToken(ctx interface{}, token interface{}) *MockSessioner_GetByToken_Call {
	return &MockSessioner_GetByToken_Call{Call: _e.mock.On("GetByToken", ctx, token)}
}

func (_c *MockSessioner_GetByToken_Call) Run(run func(ctx context.Context, token string)) *MockSessioner_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessioner_GetByToken_Call) Return(session *model.Session, err error) *MockSessioner_GetByToken_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessioner_GetByToken_Call) RunAndReturn(run func(ctx context.Context, token string) (*model.Session, error)) *MockSessioner_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTokenFull provides a mock function for the type MockSessioner
func (_mock *MockSessioner) GetByTokenFull(ctx context.Context, token string) (*model.Session, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByTokenFull")
	}

	var r0 *model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Session, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Session); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessioner_GetByTokenFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTokenFull'
type MockSessioner_GetByTokenFull_Call struct {
	*mock.Call
}

// GetByTokenFull is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessioner_Expecter) GetByTokenFull(ctx interface{}, token interface{}) *MockSessioner_GetByTokenFull_Call {
	return &MockSessioner_GetByTokenFull_Call{Call: _e.mock.On("GetByTokenFull", ctx, token)}
}

func (_c *MockSessioner_GetByTokenFull_Call) Run(run func(ctx context.Context, token string)) *MockSessioner_GetByTokenFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessioner_GetByTokenFull_Call) Return(session *model.Session, err error) *MockSessioner_GetByTokenFull_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessioner_GetByTokenFull_Call) RunAndReturn(run func(ctx context.Context, token string) (*model.Session, error)) *MockSessioner_GetByTokenFull_Call {
	_c.Call.Return(run)
	return _c
}

// Invalidate provides a mock function for the type MockSessioner
func (_mock *MockSessioner) Invalidate(ctx context.Context, token string) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Invalidate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessioner_Invalidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invalidate'
type MockSessioner_Invalidate_Call struct {
	*mock.Call
}

// Invalidate is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessioner_Expecter) Invalidate(ctx interface{}, token interface{}) *MockSessioner_Invalidate_Call {
	return &MockSessioner_Invalidate_Call{Call: _e.mock.On("Invalidate", ctx, token)}
}

func (_c *MockSessioner_Invalidate_Call) Run(run func(ctx context.Context, token string)) *MockSessioner_Invalidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessioner_Invalidate_Call) Return(err error) *MockSessioner_Invalidate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessioner_Invalidate_Call) RunAndReturn(run func(ctx context.Context, token string) error) *MockSessioner_Invalidate_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateAllSessions provides a mock function for the type MockSessioner
func (_mock *MockSessioner) InvalidateAllSessions(ctx context.Context, userID string, token string) error {
	ret := _mock.Called(ctx, userID, token)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateAllSessions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, userID, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessioner_InvalidateAllSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateAllSessions'
type MockSessioner_InvalidateAllSessions_Call struct {
	*mock.Call
}

// InvalidateAllSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - token string
func (_e *MockSessioner_Expecter) InvalidateAllSessions(ctx interface{}, userID interface{}, token interface{}) *MockSessioner_InvalidateAllSessions_Call {
	return &MockSessioner_InvalidateAllSessions_Call{Call: _e.mock.On("InvalidateAllSessions", ctx, userID, token)}
}

func (_c *MockSessioner_InvalidateAllSessions_Call) Run(run func(ctx context.Context, userID string, token string)) *MockSessioner_InvalidateAllSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessioner_InvalidateAllSessions_Call) Return(err error) *MockSessioner_InvalidateAllSessions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessioner_InvalidateAllSessions_Call) RunAndReturn(run func(ctx context.Context, userID string, token string) error) *MockSessioner_InvalidateAllSessions_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateByID provides a mock function for the type MockSessioner
func (_mock *MockSessioner) InvalidateByID(ctx context.Context, token string, sessionID string) error {
	ret := _mock.Called(ctx, token, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, token, sessionID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessioner_InvalidateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateByID'
type MockSessioner_InvalidateByID_Call struct {
	*mock.Call
}

// InvalidateByID is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - sessionID string
func (_e *MockSessioner_Expecter) InvalidateByID(ctx interface{}, token interface{}, sessionID interface{}) *MockSessioner_InvalidateByID_Call {
	return &MockSessioner_InvalidateByID_Call{Call: _e.mock.On("InvalidateByID", ctx, token, sessionID)}
}

func (_c *MockSessioner_InvalidateByID_Call) Run(run func(ctx context.Context, token string, sessionID string)) *MockSessioner_InvalidateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessioner_InvalidateByID_Call) Return(err error) *MockSessioner_InvalidateByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessioner_InvalidateByID_Call) RunAndReturn(run func(ctx context.Context, token string, sessionID string) error) *MockSessioner_InvalidateByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByToken provides a mock function for the type MockSessioner
func (_mock *MockSessioner) ListByToken(ctx context.Context, userID string) ([]*model.Session, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListByToken")
	}

	var r0 []*model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*model.Session, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*model.Session); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessioner_ListByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByToken'
type MockSessioner_ListByToken_Call struct {
	*mock.Call
}

// ListByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockSessioner_Expecter) ListByToken(ctx interface{}, userID interface{}) *MockSessioner_ListByToken_Call {
	return &MockSessioner_ListByToken_Call{Call: _e.mock.On("ListByToken", ctx, userID)}
}

func (_c *MockSessioner_ListByToken_Call) Run(run func(ctx context.Context, userID string)) *MockSessioner_ListByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessioner_ListByToken_Call) Return(sessions []*model.Session, err error) *MockSessioner_ListByToken_Call {
	_c.Call.Return(sessions, err)
	return _c
}

func (_c *MockSessioner_ListByToken_Call) RunAndReturn(run func(ctx context.Context, userID string) ([]*model.Session, error)) *MockSessioner_ListByToken_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function for the type MockSessioner
func (_mock *MockSessioner) Refresh(ctx context.Context, refreshToken string) (*model.Session, error) {
	ret := _mock.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 *model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Session, error)); ok {
		return returnFunc(ctx, refreshToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Session); ok {
		r0 = returnFunc(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessioner_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockSessioner_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *MockSessioner_Expecter) Refresh(ctx interface{}, refreshToken interface{}) *MockSessioner_Refresh_Call {
	return &MockSessioner_Refresh_Call{Call: _e.mock.On("Refresh", ctx, refreshToken)}
}

func (_c *MockSessioner_Refresh_Call) Run(run func(ctx context.Context, refreshToken string)) *MockSessioner_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessioner_Refresh_Call) Return(session *model.Session, err error) *MockSessioner_Refresh_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessioner_Refresh_Call) RunAndReturn(run func(ctx context.Context, refreshToken string) (*model.Session, error)) *MockSessioner_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTwoFactorStatus provides a mock function for the type MockSessioner
func (_mock *MockSessioner) UpdateTwoFactorStatus(ctx context.Context, token string, isPending bool) error {
	ret := _mock.Called(ctx, token, isPending)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTwoFactorStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = returnFunc(ctx, token, isPending)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessioner_UpdateTwoFactorStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTwoFactorStatus'
type MockSessioner_UpdateTwoFactorStatus_Call struct {
	*mock.Call
}

// UpdateTwoFactorStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - isPending bool
func (_e *MockSessioner_Expecter) UpdateTwoFactorStatus(ctx interface{}, token interface{}, isPending interface{}) *MockSessioner_UpdateTwoFactorStatus_Call {
	return &MockSessioner_UpdateTwoFactorStatus_Call{Call: _e.mock.On("UpdateTwoFactorStatus", ctx, token, isPending)}
}

func (_c *MockSessioner_UpdateTwoFactorStatus_Call) Run(run func(ctx context.Context, token string, isPending bool)) *MockSessioner_UpdateTwoFactorStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessioner_UpdateTwoFactorStatus_Call) Return(err error) *MockSessioner_UpdateTwoFactorStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessioner_UpdateTwoFactorStatus_Call) RunAndReturn(run func(ctx context.Context, token string, isPending bool) error) *MockSessioner_UpdateTwoFactorStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function for the type MockSessioner
func (_mock *MockSessioner) Validate(ctx context.Context, token string) (*model.Session, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 *model.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Session, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Session); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessioner_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockSessioner_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessioner_Expecter) Validate(ctx interface{}, token interface{}) *MockSessioner_Validate_Call {
	return &MockSessioner_Validate_Call{Call: _e.mock.On("Validate", ctx, token)}
}

func (_c *MockSessioner_Validate_Call) Run(run func(ctx context.Context, token string)) *MockSessioner_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessioner_Validate_Call) Return(session *model.Session, err error) *MockSessioner_Validate_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessioner_Validate_Call) RunAndReturn(run func(ctx context.Context, token string) (*model.Session, error)) *MockSessioner_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTwoFactorer creates a new instance of MockTwoFactorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTwoFactorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTwoFactorer {
	mock := &MockTwoFactorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTwoFactorer is an autogenerated mock type for the TwoFactorer type
type MockTwoFactorer struct {
	mock.Mock
}

type MockTwoFactorer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTwoFactorer) EXPECT() *MockTwoFactorer_Expecter {
	return &MockTwoFactorer_Expecter{mock: &_m.Mock}
}

// Disable provides a mock function for the type MockTwoFactorer
func (_mock *MockTwoFactorer) Disable(ctx context.Context, userID string) error {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Disable")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTwoFactorer_Disable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disable'
type MockTwoFactorer_Disable_Call struct {
	*mock.Call
}

// Disable is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockTwoFactorer_Expecter) Disable(ctx interface{}, userID interface{}) *MockTwoFactorer_Disable_Call {
	return &MockTwoFactorer_Disable_Call{Call: _e.mock.On("Disable", ctx, userID)}
}

func (_c *MockTwoFactorer_Disable_Call) Run(run func(ctx context.Context, userID string)) *MockTwoFactorer_Disable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTwoFactorer_Disable_Call) Return(err error) *MockTwoFactorer_Disable_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTwoFactorer_Disable_Call) RunAndReturn(run func(ctx context.Context, userID string) error) *MockTwoFactorer_Disable_Call {
	_c.Call.Return(run)
	return _c
}

// Enable provides a mock function for the type MockTwoFactorer
func (_mock *MockTwoFactorer) Enable(ctx context.Context, userID string, code string) error {
	ret := _mock.Called(ctx, userID, code)

	if len(ret) == 0 {
		panic("no return value specified for Enable")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, userID, code)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTwoFactorer_Enable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enable'
type MockTwoFactorer_Enable_Call struct {
	*mock.Call
}

// Enable is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - code string
func (_e *MockTwoFactorer_Expecter) Enable(ctx interface{}, userID interface{}, code interface{}) *MockTwoFactorer_Enable_Call {
	return &MockTwoFactorer_Enable_Call{Call: _e.mock.On("Enable", ctx, userID, code)}
}

func (_c *MockTwoFactorer_Enable_Call) Run(run func(ctx context.Context, userID string, code string)) *MockTwoFactorer_Enable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTwoFactorer_Enable_Call) Return(err error) *MockTwoFactorer_Enable_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTwoFactorer_Enable_Call) RunAndReturn(run func(ctx context.Context, userID string, code string) error) *MockTwoFactorer_Enable_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function for the type MockTwoFactorer
func (_mock *MockTwoFactorer) GetByUserID(ctx context.Context, userID string) (*model.TwoFactor, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 *model.TwoFactor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.TwoFactor, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.TwoFactor); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TwoFactor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTwoFactorer_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type MockTwoFactorer_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockTwoFactorer_Expecter) GetByUserID(ctx interface{}, userID interface{}) *MockTwoFactorer_GetByUserID_Call {
	return &MockTwoFactorer_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, userID)}
}

func (_c *MockTwoFactorer_GetByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockTwoFactorer_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTwoFactorer_GetByUserID_Call) Return(twoFactor *model.TwoFactor, err error) *MockTwoFactorer_GetByUserID_Call {
	_c.Call.Return(twoFactor, err)
	return _c
}

func (_c *MockTwoFactorer_GetByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) (*model.TwoFactor, error)) *MockTwoFactorer_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// RegenerateQRCode provides a mock function for the type MockTwoFactorer
func (_mock *MockTwoFactorer) RegenerateQRCode(ctx context.Context, userID string) (string, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for RegenerateQRCode")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTwoFactorer_RegenerateQRCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegenerateQRCode'
type MockTwoFactorer_RegenerateQRCode_Call struct {
	*mock.Call
}

// RegenerateQRCode is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockTwoFactorer_Expecter) RegenerateQRCode(ctx interface{}, userID interface{}) *MockTwoFactorer_RegenerateQRCode_Call {
	return &MockTwoFactorer_RegenerateQRCode_Call{Call: _e.mock.On("RegenerateQRCode", ctx, userID)}
}

func (_c *MockTwoFactorer_RegenerateQRCode_Call) Run(run func(ctx context.Context, userID string)) *MockTwoFactorer_RegenerateQRCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTwoFactorer_RegenerateQRCode_Call) Return(s string, err error) *MockTwoFactorer_RegenerateQRCode_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTwoFactorer_RegenerateQRCode_Call) RunAndReturn(run func(ctx context.Context, userID string) (string, error)) *MockTwoFactorer_RegenerateQRCode_Call {
	_c.Call.Return(run)
	return _c
}

// Setup provides a mock function for the type MockTwoFactorer
func (_mock *MockTwoFactorer) Setup(ctx context.Context, userID string) (*service.TwoFactorSetupData, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 *service.TwoFactorSetupData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*service.TwoFactorSetupData, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *service.TwoFactorSetupData); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TwoFactorSetupData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTwoFactorer_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type MockTwoFactorer_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockTwoFactorer_Expecter) Setup(ctx interface{}, userID interface{}) *MockTwoFactorer_Setup_Call {
	return &MockTwoFactorer_Setup_Call{Call: _e.mock.On("Setup", ctx, userID)}
}

func (_c *MockTwoFactorer_Setup_Call) Run(run func(ctx context.Context, userID string)) *MockTwoFactorer_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTwoFactorer_Setup_Call) Return(twoFactorSetupData *service.TwoFactorSetupData, err error) *MockTwoFactorer_Setup_Call {
	_c.Call.Return(twoFactorSetupData, err)
	return _c
}

func (_c *MockTwoFactorer_Setup_Call) RunAndReturn(run func(ctx context.Context, userID string) (*service.TwoFactorSetupData, error)) *MockTwoFactorer_Setup_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function for the type MockTwoFactorer
func (_mock *MockTwoFactorer) Verify(ctx context.Context, userID string, code string) error {
	ret := _mock.Called(ctx, userID, code)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, userID, code)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTwoFactorer_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockTwoFactorer_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - code string
func (_e *MockTwoFactorer_Expecter) Verify(ctx interface{}, userID interface{}, code interface{}) *MockTwoFactorer_Verify_Call {
	return &MockTwoFactorer_Verify_Call{Call: _e.mock.On("Verify", ctx, userID, code)}
}

func (_c *MockTwoFactorer_Verify_Call) Run(run func(ctx context.Context, userID string, code string)) *MockTwoFactorer_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTwoFactorer_Verify_Call) Return(err error) *MockTwoFactorer_Verify_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTwoFactorer_Verify_Call) RunAndReturn(run func(ctx context.Context, userID string, code string) error) *MockTwoFactorer_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserer creates a new instance of MockUserer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserer {
	mock := &MockUserer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserer is an autogenerated mock type for the Userer type
type MockUserer struct {
	mock.Mock
}

type MockUserer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserer) EXPECT() *MockUserer_Expecter {
	return &MockUserer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUserer
func (_mock *MockUserer) Create(ctx context.Context, user *model.User, password string) (*model.User, error) {
	ret := _mock.Called(ctx, user, password)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User, string) (*model.User, error)); ok {
		return returnFunc(ctx, user, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User, string) *model.User); ok {
		r0 = returnFunc(ctx, user, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.User, string) error); ok {
		r1 = returnFunc(ctx, user, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
//   - password string
func (_e *MockUserer_Expecter) Create(ctx interface{}, user interface{}, password interface{}) *MockUserer_Create_Call {
	return &MockUserer_Create_Call{Call: _e.mock.On("Create", ctx, user, password)}
}

func (_c *MockUserer_Create_Call) Run(run func(ctx context.Context, user *model.User, password string)) *MockUserer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.User
		if args[1] != nil {
			arg1 = args[1].(*model.User)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserer_Create_Call) Return(user1 *model.User, err error) *MockUserer_Create_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserer_Create_Call) RunAndReturn(run func(ctx context.Context, user *model.User, password string) (*model.User, error)) *MockUserer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockUserer
func (_mock *MockUserer) GetByID(ctx context.Context, id string) (*model.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserer_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUserer_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserer_Expecter) GetByID(ctx interface{}, id interface{}) *MockUserer_GetByID_Call {
	return &MockUserer_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockUserer_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockUserer_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserer_GetByID_Call) Return(user *model.User, err error) *MockUserer_GetByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserer_GetByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*model.User, error)) *MockUserer_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// InitiatePasswordReset provides a mock function for the type MockUserer
func (_mock *MockUserer) InitiatePasswordReset(ctx context.Context, email string) error {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for InitiatePasswordReset")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserer_InitiatePasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiatePasswordReset'
type MockUserer_InitiatePasswordReset_Call struct {
	*mock.Call
}

// InitiatePasswordReset is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserer_Expecter) InitiatePasswordReset(ctx interface{}, email interface{}) *MockUserer_InitiatePasswordReset_Call {
	return &MockUserer_InitiatePasswordReset_Call{Call: _e.mock.On("InitiatePasswordReset", ctx, email)}
}

func (_c *MockUserer_InitiatePasswordReset_Call) Run(run func(ctx context.Context, email string)) *MockUserer_InitiatePasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserer_InitiatePasswordReset_Call) Return(err error) *MockUserer_InitiatePasswordReset_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserer_InitiatePasswordReset_Call) RunAndReturn(run func(ctx context.Context, email string) error) *MockUserer_InitiatePasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function for the type MockUserer
func (_mock *MockUserer) ResetPassword(ctx context.Context, token string, newPassword string) error {
	ret := _mock.Called(ctx, token, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, token, newPassword)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserer_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type MockUserer_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - newPassword string
func (_e *MockUserer_Expecter) ResetPassword(ctx interface{}, token interface{}, newPassword interface{}) *MockUserer_ResetPassword_Call {
	return &MockUserer_ResetPassword_Call{Call: _e.mock.On("ResetPassword", ctx, token, newPassword)}
}

func (_c *MockUserer_ResetPassword_Call) Run(run func(ctx context.Context, token string, newPassword string)) *MockUserer_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserer_ResetPassword_Call) Return(err error) *MockUserer_ResetPassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserer_ResetPassword_Call) RunAndReturn(run func(ctx context.Context, token string, newPassword string) error) *MockUserer_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockUserer
func (_mock *MockUserer) Update(ctx context.Context, user *model.User) (*model.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) (*model.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) *model.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockUserer_Expecter) Update(ctx interface{}, user interface{}) *MockUserer_Update_Call {
	return &MockUserer_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *MockUserer_Update_Call) Run(run func(ctx context.Context, user *model.User)) *MockUserer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.User
		if args[1] != nil {
			arg1 = args[1].(*model.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserer_Update_Call) Return(user1 *model.User, err error) *MockUserer_Update_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserer_Update_Call) RunAndReturn(run func(ctx context.Context, user *model.User) (*model.User, error)) *MockUserer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function for the type MockUserer
func (_mock *MockUserer) UpdatePassword(ctx context.Context, userID string, currentPassword string, newPassword string) error {
	ret := _mock.Called(ctx, userID, currentPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, userID, currentPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserer_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type MockUserer_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - currentPassword string
//   - newPassword string
func (_e *MockUserer_Expecter) UpdatePassword(ctx interface{}, userID interface{}, currentPassword interface{}, newPassword interface{}) *MockUserer_UpdatePassword_Call {
	return &MockUserer_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, userID, currentPassword, newPassword)}
}

func (_c *MockUserer_UpdatePassword_Call) Run(run func(ctx context.Context, userID string, currentPassword string, newPassword string)) *MockUserer_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockUserer_UpdatePassword_Call) Return(err error) *MockUserer_UpdatePassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserer_UpdatePassword_Call) RunAndReturn(run func(ctx context.Context, userID string, currentPassword string, newPassword string) error) *MockUserer_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyEmail provides a mock function for the type MockUserer
func (_mock *MockUserer) VerifyEmail(ctx context.Context, token string) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserer_VerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyEmail'
type MockUserer_VerifyEmail_Call struct {
	*mock.Call
}

// VerifyEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockUserer_Expecter) VerifyEmail(ctx interface{}, token interface{}) *MockUserer_VerifyEmail_Call {
	return &MockUserer_VerifyEmail_Call{Call: _e.mock.On("VerifyEmail", ctx, token)}
}

func (_c *MockUserer_VerifyEmail_Call) Run(run func(ctx context.Context, token string)) *MockUserer_VerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserer_VerifyEmail_Call) Return(err error) *MockUserer_VerifyEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserer_VerifyEmail_Call) RunAndReturn(run func(ctx context.Context, token string) error) *MockUserer_VerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}
